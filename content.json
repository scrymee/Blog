{"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/08/16/hello-world/"},{"title":"startHexo","text":"githubにブログをスムーズに公開する要するに… Hexoというライブラリを使用する Github Pageを使用する Hexoは、Markdownをもとに静的テキストデータを出力する。GithubPageは静的ページを良い感じに展開してくれるGitHubの機能。この２つを使用する。 事前準備hexoを使用するためにはいくつかのライブラリが必要になるので、未インストールの場合はインストールする。これがある場合は割愛してよい。 node.jsとnpmnode -vで確認できる。command not foundが出力された場合インストールする。 Homebrewを使用してもインストールできるようだが、今回は公式サイトのインストーラーを使用する。 Node.js 公式サイトでダウンロードしたファイルを起動して案内に従いインストールする。 インストールされているか確認のためにversionを出力してみる 12$ node -vv16.17.0 同じように、node.jsをインストールしたときに、npmというパッケージ管理ツールもインストールされるので確認しておく。npmによって、いくつものライブラリを簡単にインストールすることができるようになる。 12$ npm -v8.15.0 良い感じ。 hexo今回はMarkdownをいい感じに出力してくれるhexoを使用する。その雛形をいい感じに作成してくれるhexoのコマンドをローカルでも使用できるようにする。 余談だが、markdownはpandocなどを使用することでPDFやWordでの出力も可能であるし、PPT風の発表資料の作成もできる。markdown便利。 閑話休題。引き続きhexoをインストールする。 sudo npm install hexo-cli -g インストールが完了したら下記のコマンドでインストールされたか確認する 123456$ hexo -vhexo-cli: 4.3.0os: darwin 20.6.0 11.6.4node: 16.17.0... Hexoのアプリケーションディレクトリ作成事前準備が終わったら、Hexoによってブログの雛形を作成する。アプリケーションを作成したいディレクトリに移動して、下記コマンドを実行する hexo init [アプリ名] 1234$ hexo init hexoINFO Cloning hexo-starter https://github.com/hexojs/hexo-starter.gitINFO Install dependenciesINFO Start blogging with Hexo! アプリケーションディレクトリにアクセスすると、諸々のファイルが作成されている 12345678910$ cd hexo$ ls -1_config.landscape.yml_config.ymlnode_modulespackage-lock.jsonpackage.jsonscaffoldssourcethemes これで一旦完了。実際のブログを確認してみる。 Hexoで作成したブログの確認Hexoで作成したアプリケーションディレクトリに移動して、hexo serverで起動できる。hexo sでも良い。 12345$ cd hexo$ hexo serverINFO Validating configINFO Start processingINFO Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop. これで、実行時記載のURLにアクセスすると、ブログの画面が確認できる。 TOPページが記載されているmdファイルの確認下記で確認可能。アプリケーションディレクトリのsource/_post/hello-world.mdに存在している。そのためこの中身を書き換えることで、記事の中身も変更できる。 12345$ cd hexo$ cd source$ cd source/_post$ ls -1hello-world.md 記事を追加する記事は、hexo new [mdファイル名]で作成ができる。これもhexo n [mdファイル名]でも良い。 123$ hexo n 'startHexo'INFO Validating configINFO Created: ~/workspace/hexo/source/_posts/startHexo.md これで、source/_postディレクトリ内にmdファイルが作成される 123% ls -1hello-world.mdstartHexo.md 余談だが、詳しいコマンドは、hexo --helpから確認できる。 12345678910111213141516$ hexo --helpINFO Validating configUsage: hexo &lt;command&gt;Commands: clean Remove generated files and cache. config Get or set configurations. deploy Deploy your website. generate Generate static files. help Get help on a command. init Create a new Hexo folder. list List the information of the site migrate Migrate your site from other system to Hexo. new Create a new post. ...","link":"/2022/08/16/startHexo/"},{"title":"hexoをdeployしたgithubのリポジトリからgithubPagesを確認する","text":"Summary Summary# すでにあるリポジトリをgithubPagesとして使用する リポジトリに移動する settingsを選択 Pagesのサイドバーを選択 urlが確認できるのでアクセス 反映には10分程度要することがあるため、すぐ確認ができるわけではないようだ。 GitHub Pages サイトを作成する - GitHub Docs","link":"/2022/08/17/publishMaster/"},{"title":"シェルスクリプトのxargs内で複数の変数を使用する","text":"Summary ユースケース 実行するシェル 解説 Summary# シェルでワンライナーで加工前の変数と加工後の変数を使用する方法\u001b shell -c 'XX'を用いる ユースケース#特定のファイルの出力ファイルをディレクトリ名から取得する 123$ ls -1apple-ringo.txtfish-sakana.txt 実行するシェル#1find ./app/tests/ -name *.txt | xargs -I@ sh -c &quot; VAR=`sed 's/-//g'`; phpunit @ --coverage-php reports/$VAR.php&quot; 解説#実行シェルのfindで、app/tests配下のファイルを全取得する 123$ find ./app/tests/ -name *.txtapp/tests/apple-ringoTest.phpapp/tests/fish-sakanaTest.php その後xargs -I@で取得した値を引数として渡すが、引数の１つを加工したい。 sedで置換した値をVARという変数に代入。（変数にコマンド結果を代入したい場合はバッククオートを使う) その後、セミコロンで次の処理を書く @内の変数とVARの変数がそれぞれ使用できるので記載する 1~3までの処理をsh -cで囲んであげる 最終的に下記のようなコマンド郡が実行される 12phpunit app/tests/apple-ringoTest.php --coverage-php reports/appleringoTest.phpphpunit app/tests/fish-sakanaTest.php --coverage-php reports/fishsakanaTest.php これでよし","link":"/2022/08/17/shell/"},{"title":"hexoをGithubにデプロイする","text":"Summary deploy用のライブラリインストール hexoをデプロイする準備 デプロイ 参考文献 Summary# Hexoをデプロイする \u001b deploy用のライブラリインストール#npm install hexo-deployer-git --save gitをhexoコマンドで使用するためのパッケージをインストールする hexoをデプロイする準備#hexoにはgithubにデプロイ用のコマンドがあるので、それを使うどのリポジトリにアップロードするかを設定する。 _config.ymlで&lt;更新＞の箇所を修正する 1234567891011# URL## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'url: http://example.com # &lt;更新&gt;# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git # &lt;更新&gt; repo: https://github.com/{username}/{username}.github.io # &lt;更新&gt; branch: main # &lt;更新&gt; リポジトリのreposは、HTTPSで指定されているもの デプロイ#hexo deployで可能。hexo deploy -gとオプションを追記することで、静的ファイルの生成も同時に行う また上記ライブラリをインストールしていないと下記のようなエラーが出るので 1ERROR Deployer not found: git 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647NFO Validating configINFO Start processingINFO Files loaded in 49 msINFO 0 files generated in 20 msINFO Deploying: gitINFO Setting up Git deployment...Initialized empty Git repository in hexo/.deploy_git/.git/[main (root-commit) 93eef4a] First commit 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 placeholderINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...[main 906c1c0] Site updated: 2022-08-17 13:07:00 21 files changed, 6278 insertions(+) create mode 100644 2022/08/16/hello-world/index.html create mode 100644 2022/08/16/startHexo/index.html create mode 100644 2022/08/17/uploadHexo/index.html create mode 100644 archives/2022/08/index.html create mode 100644 archives/2022/index.html create mode 100644 archives/index.html create mode 100644 css/fonts/FontAwesome.otf create mode 100644 css/fonts/fontawesome-webfont.eot create mode 100644 css/fonts/fontawesome-webfont.svg create mode 100644 css/fonts/fontawesome-webfont.ttf create mode 100644 css/fonts/fontawesome-webfont.woff create mode 100644 css/fonts/fontawesome-webfont.woff2 create mode 100644 css/images/banner.jpg create mode 100644 css/style.css create mode 100644 fancybox/jquery.fancybox.min.css create mode 100644 fancybox/jquery.fancybox.min.js create mode 100644 index.html create mode 100644 js/jquery-3.4.1.min.js create mode 100644 js/script.js delete mode 100644 placeholder create mode 100644 tags/hexo/index.htmlEnumerating objects: 42, done.Counting objects: 100% (42/42), done.Delta compression using up to 8 threadsCompressing objects: 100% (31/31), done.Writing objects: 100% (42/42), 887.64 KiB | 15.04 MiB/s, done.Total 42 (delta 6), reused 0 (delta 0), pack-reused 0remote: Resolving deltas: 100% (6/6), done.To https://github.com/hoge/fuga.github.io.git * [new branch] HEAD -&gt; mainBranch 'main' set up to track remote branch 'main' from 'https://github.com/scrymee/scrymee.github.io.git'.INFO Deploy done: git 完了する。githubのリポジトリにアクセスすると確認できる。 参考文献#Git Pages &amp; Hexoで手軽な無料Blogを作る - Qiita","link":"/2022/08/17/deployHexo/"},{"title":"jsでGameを作るときの座標関係を簡単に導入するロジック","text":"Summary Summary# jsでゲームを作るときの一般的な座標関係について 落ちゲーなどを作るときに座標が必要になるケースが有る。リバーシや将棋、囲碁・テトリス・ぷよぷよなど多くあるだろう。これは特定の位置の座標の状態に応じて表示内容を変化させることで実現している。そのため、ゲームを作る上で下記のような座標を作りたくなるケースが有る。 123456789const board = [ [0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0],] これは下記のようにすると作成できる 12345678910const height = 10;const width = 10;let board = [];for(let y = 0; y &lt; height; y++){ for(let x = 0; x &lt; width; x++){ board[y][x] = &quot;0&quot;; }} これによりjsで座標を指定することができるので、例えば次のようにオブジェクトをもたせても良い。 12345678910111213const height = 10;const width = 10;let board = [];for(let y = 0; y &lt; height; y++){ for(let x = 0; x &lt; width; x++){ board[y][x] = { text: '0', status: 'open' }; }} これにより将来的な処理で、オブジェクトのプロパティを参照できる。 123456789101112131415const height = 10;const width = 10;for(let y = 0; y &lt; height; y++){ for(let x = 0; x &lt; width; x++){ if(board[y][x].open) { //指定した座標がopen状態の時の処理 } else { //指定した座標がclose状態の時の処理 } }}","link":"/2022/08/17/jsGame/"},{"title":"vscodeの拡張機能のPasteImageを導入する","text":"Summary Paste Image。とは Paste Imageのインストール PasteImageの設定 使用方法 参考文献 Summary# vscodeの拡張機能「Paste Image」を導入しよう 導入して使いやすいように、setting.jsonを編集しよう。 Paste Image。とは#VsCodeの拡張機能で、画像キャプチャしたデータをmdファイルに貼り付けられる機能markdownで貼り付けた際は、指定したディレクトリに画像ファイルを自動で保存してくれる。 Paste Imageのインストール#vscodeの拡張機能で下記をインストールする。 Paste Image - Visual Studio Marketplace\u001b PasteImageの設定#setting.jsonにPasteImageの設定を追記する。下記をそのままコピペするといい。これはmarkdownを貼り付けた際に、どういう形式で保存するかを記載している 1234567&quot;pasteImage.defaultName&quot;: &quot;Y-MM-DD-HH-mm-ss&quot;,&quot;pasteImage.insertPattern&quot;: &quot;![](${imageFilePath})&quot;,&quot;pasteImage.path&quot;: &quot;${projectRoot}/source/images/${currentFileNameWithoutExt}&quot;,&quot;pasteImage.basePath&quot;: &quot;${projectRoot}/source&quot;,&quot;pasteImage.forceUnixStyleSeparator&quot;: true,&quot;pasteImage.prefix&quot;: &quot;/&quot; ${projectRoot}は、VScodeで開いているワークスペースのディレクトリパスとなる。 使用方法#クリップボードにコピーした画像を、貼り付けてあげると良い。貼り付ける際は、shift + command + Pで表示されるコマンド欄に、paste imageと入力してそれを選択してあげると貼り付けられる。 このとき、このコマンドに対してショートカットキーを設定することもできるので設定するとよいだろう。 僕のPCはMacなので、shift + command + ctrl + 4でクリップボードにコピーしshift + command + ctrl + Vでクリップボードからmdにペーストできるようにしている 参考文献#Hexo によるブログ執筆環境の構築 | /etc/openjnyGitHub+VSCodeでのMarkdownドキュメンテーションのプロジェクトルールを考える","link":"/2022/08/18/vscodePasteImage/"},{"title":"hexoの目次をプラグインを導入する","text":"Summary# プラグインのインストール _config.ymlにtoc情報を追記 目次を挿入したい箇所にtocを記載する \u001b プラグインのインストール#hexoで目次を出力するためのプラグインをインストールする npm install hexo-toc --save _config.ymlにtoc情報を追記#12345678toc: maxdepth: 6 class: toc slugify: transliteration anchor: position: after symbol: &quot;#&quot; style: header-anchor 目次を挿入したい箇所にtocを記載する#123&lt;! -- toc --&gt; これでよし。余談だが、tocはTable of contentsの頭文字を取得したもの。目次という意味。 僕は、scaffoldsディレクトリのpost.mdに事前に追記している。 12345678910111213---title: {{ title }}date: {{ date }}categories: - programmingtags: - ---&lt;!-- toc --&gt;&lt;!-- more --&gt; これでいい感じに見出しが挿入される","link":"/2022/08/18/hexo/"},{"title":"gitのリモートリポジトリのブランチ名を指定してPUSHする","text":"gitで現在のブランチをリモートリポジトリの指定ブランチにPUSHする ローカルと別のブランチ名のリモートブランチにPUSHするコマンドをいつ使うのか 実例 参考文献 gitで現在のブランチをリモートリポジトリの指定ブランチにPUSHする#下記のようにコロンで指定すると別名のブランチにPUSHすることができる 12// ローカルの developブランチを、origin 上の release ブランチに push するgit push origin develop:release 記載しない場合は、同名のブランチにPUSHする ちなみに最新の作業を指定プランチにPUSHしたい場合下記のようにもかける 1git push origin HEAD HEADは現在のブランチの先頭を指し、作業ブランチ名も取得される。個人的にはブランチを切り替えているのを忘れてPUSHするようなケースもありうるので、明確に書くほうが良いようには思えるが。。。 ローカルと別のブランチ名のリモートブランチにPUSHするコマンドをいつ使うのか#githubのリポジトリを作り、ローカルでmasterブランチを使って作業していた。定期的にバックアップを残したいが、そのたびに別のブランチを作成するのは手間だ。そういうときに下記のようにするとブランチでバックアップを残せる。 1git push origin master:2022backup-master 僕が実際に使ったケースとしては、hexoを使用しているときだ。masterブランチは、hexo dによって一部のファイルのみ保存されている状況だが、hexoで出力したアプリケーションファイルをすべてバックアップとして残しておきたかった。特にmdファイルはhexo dだと保存されないため、将来的な移植にも不便だ。 そこで、mdファイル保存用のリポジトリを作成しようと思ったが、管理に手間がかかる懸念があった。そこで同じリポジトリのsrcブランチで、hexoで使用している全ファイルのbackupを残すこととした。 ※ブランチを切り替えることで、ファイルが閲覧可能状態になるため下書きなどを使用しているのであれば、あまり推奨はしない。リポジトリを分けることをおすすめする。 実例#hexoのディレクトリをすべてPUSHした。 1234567891011# gitを作成git init# gitのリモートリポジトリとの接続git remote add origin [repository-name]# git addgit add .# git commitgit commit -m 'first commit'# git pushgit push -u origin main:src mainで作業しているが、srcブランチが作成されPUSHできた 参考文献#ブランチを指定して git push する方法 | WWWクリエイターズ","link":"/2022/08/18/git/"},{"title":"phpunitを使うときのTips一覧","text":"phpunitを実行しやすくるために実装レベルで修正したいこと 別の関数を呼び出すときはclassプロパティに値を挿入する mockの使い方 phpunitを実行しやすくるために実装レベルで修正したいこと#Testの修正ではどうにもならないので実装レベルで直したいことについて 別の関数を呼び出すときはclassプロパティに値を挿入する#別のクラスの関数を呼び出すときに、下記のように関数内でインスタンスを宣言してから関数を呼び出すケースが有る。 123456789public function getUser(){ // ..中略 $userClass = new User(); $user = $userClass-&gt;find($id); // ..中略} これで動作上は問題ないのだが、テストの観点から見ると、この関数getUser()自体は別のクラスの関数を使用しているため依存度が高くなる。つまりテストを実行するときは、Userクラスのfind関数の動作まで保証して動作確認する必要がある。 もし、Userクラスのfind関数は別途テストケースを設けている場合は、テストが重複してしまう。さらに、上記の例だと簡単でよいが、条件説が複雑に絡み合っており、戻り値がすぐに判断できないようなケースがあるとすると、実装時は問題なくても将来的に保守する側やテストケースを新たに追加する場合困る。 下記コードの説明。 12345678910111213141516171819202122public function getUserPost($id, $name){ // ..中略 // ------------------- // ユーザーインスタンスを呼び出す // ------------------- $user = new User(); // ------------------------------ // ログインユーザーがItemを持っているときの関数での処理 // ※ログインユーザー情報をもとに、created・name・adress・nicknameの情報が // なければ例外を返却してしまい処理が進まないことが400行程度のコードを読み解くとわかる // (本来そのようなデータが存在しないため考慮していなかった) // そのためここを通過させるためにユーザーをログインさせた状態をテストコードに追記する必要がある。。。ただ、ここはhaveItemList()関数のテストで記載すれば良い話なので、ここであえてその条件を追記するのは手間。 // ------------------------------- if ($user-&gt;haveItemList()) { // 中略 } else { // ..中略 }} こういうケースではUserの情報に必要な情報を調査する必要がある。最終的にコメントアウトにあるように必要な情報がわかったが、それらはこの関数のテスト自体になんの影響もないため、実際のところは、haveItemListの戻り値がtrueかfalseを設定できればよいだけなのに、関係ない箇所の調査に時間を要した。またこの関数自体では必要のないログインユーザーの情報を設定する必要もあった。テストケースも重複して記載することになりスマートではない。 これらの問題は、次で説明するmockやstubを使用することで依存関係の分離を実現できるのだが、上記の悪例のコードではmockなどを使用できない。 そのためできる限り外部の関数を呼び出すときはプロパティに持たせる。これはphpunitの機能でprivateプロパティの値をoverwriteする機能があるため、これを用いることができるようになる。上記のままであると、上書きができない。 12345678910111213141516private $_user;public function __construct() { $this-&gt;_user = new User();}public function getUser(){ if ($user-&gt;haveItemList()) { // 中略 } else { // ..中略 }} この場合は、$_userのプロパティをmockやstubに置き換えてあげることで__constructなどを実行せずに、プロパティを指定できることから、haveItemListの依存関係から抜けられる mockの使い方# mockを作成する 実行回数、引数それぞれの期待値を入力する 外部関数のmockに組み込む これで、外部関数の依存関係をなくした上でmockを作成できる期待値ごとにテストを書いてあげると良い","link":"/2022/08/18/phpunitTips/"},{"title":"shellのオプションのユースケース紹介","text":"シェルのオプションのユースケース紹介 デバッグ機能をつけたい shellで実行中にエラーが出たら処理を停止する 参考文献 シェルのオプションのユースケース紹介#シェルのオプションのユースケースを検討時点で紹介していく デバッグ機能をつけたい#シェルスクリプトで変数に値を渡してそのコマンドを実行する処理を書いた。その結果どのようなコマンドが実行されたかを確認したい -xオプションを使うと良い。 sh -x XXX.sh また、シェルファイルに書く場合は 1#!/bin/bash -x と書いても良いらしいし、特定のロジックのみ確認したい場合はset -xとset +xで囲むなぜかシバン内に書いても動作しなかったので、基本的にはsetを使う 1234#!/bin/bashset -xecho 'TEST'set +x shellで実行中にエラーが出たら処理を停止する#これはあえて付けるというより、なぜかシェルスクリプトが最後まで実行されないケースがあったときに調査するとこのオプションが付いていたからだったという経験に基づく -eオプションで、処理がエラーで返却された時点で後続の処理を実行させない sh -e XXX.sh ちなみに直前の終了ステータスは$?で確認できる 下記のようにhogeディレクトリに移動して、fugaファイルを作りたいスクリプトのときに、使うだろう。ちなみに僕の場合はphpunitの実行が途中で終わってしまうのが不明で困っていたら、シェルの実行にこのオプションが付与されたいたためだったという経験がある。 123456cd hogemkdir fuga もしeオプションを付与せずに実行した場合。hogeファイルが無いという処理は進むが、現在のディレクトリにfugaファイルを作成してしまう。つまり、./fugaが作成される。 ./hoge/fugaを作る場合は、きちんとeオプションをつける 参考文献#シェルスクリプトの罠を避ける三つの tips - Qiita","link":"/2022/08/19/shell/"},{"title":"Hexoのthemeにicarusを導入する","text":"icarusのダウンロード icarusのダウンロード#themeが公開されているgithubはこちら ppoffice/hexo-theme-icarus: A simple, delicate, and modern theme for the static site generator Hexo. ここでzipファイルをダウンロードする。 また、npmを用いてインストールできるようだこれでpackage.jsonにicarus関連の情報が追記される 12npm install -S hexo-theme-icarus hexo-renderer-inferno zipファイルをダウンロードした場合は、zipファイルを解答し、themesに移動する。そのときのディレクトリ名はicarusなどに変更しておく。 その後、_config.ymlのthemeにて、上記で変更したディレクトリ名（icarus）に変更する。 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: icarus ちなみにこのときのthemeに入力するテーマ名をtypoしてしまいエラーとなってしまう。10分程度悩んでしまった。 また、hexo s後にERRORが出る場合があるので、これをインストールする。 1234567891011121314151617INFO Validating configInferno is in development mode.INFO ======================================= ██╗ ██████╗ █████╗ ██████╗ ██╗ ██╗███████╗ ██║██╔════╝██╔══██╗██╔══██╗██║ ██║██╔════╝ ██║██║ ███████║██████╔╝██║ ██║███████╗ ██║██║ ██╔══██║██╔══██╗██║ ██║╚════██║ ██║╚██████╗██║ ██║██║ ██║╚██████╔╝███████║ ╚═╝ ╚═════╝╚═╝ ╚═╝╚═╝ ╚═╝ ╚═════╝ ╚══════╝=============================================INFO === Checking package dependencies ===ERROR Package hexo-pagination's version (1.0.0) does not satisfy the required version (^2.0.0).ERROR Please install the missing dependencies your Hexo site root directory:ERROR npm install --save hexo-pagination@^2.0.0ERROR or:ERROR yarn add hexo-pagination@^2.0.0 上記に従い書きを実行する。その後hexo sを実行すると再度同様にあたらしいパッケージを追加でインストールするように案内されるため、それには従っていく 12npm install --save hexo-pagination@^2.0.0npm install --save bulma-stylus@0.8.0 hexo-component-inferno@^1.2.0 hexo-renderer-inferno@^0.1.3 inferno@^7.3.3 inferno-create-element@^7.3.3 これでOK！画面が崩れているケースもあるのでhexo sを再度実行する","link":"/2022/08/19/hexo/"},{"title":"個人的に好きなお酒","text":"最近、ジャンルフリーでお酒を楽しむ機会が増えてきた。 2021年に読んだプログラミング関連の本#桂月 CEL 24 純米大吟醸酒#桂月 CEL24 純米大吟醸 50® | 清酒 桂月 土佐酒造株式会社 おでんパーティを開催したときに、友人が買ってきた日本酒。 聞くと、「おでんに合うお酒を店員さんに尋ねたときに勧めてくれたもの」だとか。 たしかに、そのときに飲んだお酒の中で一番美味く衝撃を受けた。日本酒はそういうものなのかもしれないけれど、おでんを邪魔することもなく控えめながらもしっかりと甘さや旨味は出ているので、おでんの旨さをより際立たせてくれて、何度もおかわりしてしまったのは言うまでもない。 フルーティでスッキリとしており、日本酒が苦手な人でもするりと飲めそうな後味。 キンキンに冷やして飲むとうまかったので、そのときはワインよろしく氷水に浸けて飲んでいた。甘みが際立ち最高。 紀州梅酒 紅南高#梅酒 紅南高｜グランプリ受賞。紅色に染まった希少梅だけで造った梅酒 社会人になってボトルでお酒を買うようになったきっかけのお酒。 梅酒の味がガツンと効き香りも良い。非常に濃厚な味は居酒屋での梅酒とは違う味わいだった。単体でのパンチ力が強く、とにかくしっかりとした梅を感じたいときに飲みたい。 友人から振る舞ってもらって知ったのだけど、当時はビールばかり飲んでいた。 「梅酒は甘すぎて無理」などと避けていたのだけど、一口飲んで一目惚れ。その場でAmazonで注文をしてしまった。 黒ボトルも渋くて好み。 紀土#紀土 純米吟醸 しぼりたて 1.8L | 紀土・紀美野・純真無垢（平和酒造）和歌山県 | -酒やの鍵本 「ここの日本酒は安くてうまい」という友人から勧められた居酒屋で飲んだお酒。 これまで、居酒屋で飲む日本酒を好んで飲むことはなかった。後味の感覚がどうにも苦手で、度数が高く濃厚なので、すぐ飽きが来て酔っ払えない。今思うと恥ずかしい日本酒に対しての固定観念を覆してくれたお酒だった。 これは後味がスッキリしている上に、香りも良い。単体でも美味しいが、主張しすぎることもないので、魚介類との相性も良い。日本酒は大量に飲むものではなく食事と合わせて飲むものだというのを教えてくれた銘柄だった。 その後調べてみると、手頃な価格で手に入れられることもわかったので、個人的によく飲むことのある日本酒だ。 マリブ#マリブ MALIBU サントリー 最初飲んでびっくりした。お酒の種類をビール・梅酒・日本酒・焼酎・ウイスキー・カクテルくらいしか知らなかったので衝撃を受けた。非常に甘ったるいのに飲んでて飽きない、今までに飲んだことのないジャンルのお酒に驚いた。そしてコーラで割って飲んだら最高にうまい。それは知人と行ったバーで出してもらったのだが、普段同じお酒は頼まないのに、追加で2回も同じオーダーをしてしまった。 この衝撃を友人に伝えたら、「いや、マリブコーラって有名だよね？」と言われた。まじか〜〜。 曰く、「クラブやバーでは定番」とのこと。お酒っぽくない味なので、テンション上がればいくらでも飲めるなと思った。後日ドンキに行くと、めちゃめちゃ見かけた、納得。","link":"/2022/01/04/favorite-liquor/"},{"title":"Hexoのテーマ「Icarus」カスタマイズまとめ","text":"IcarusはHexoのThemeの一つである。 公式ドキュメント Icarus 作者のサイト 如何给 Icarus 增加夜间模式 - iMaeGoo’s Blog Icarusで記事のデザインを変更したい#「サムネイルの表示先を変更したい」「サムネイル未指定時にデフォルト画像を設定したい」「コメントや寄付ボタンなどの不要な機能を一旦削除したい」と思った。 そういうときには、themes/icarus/layout/common/article.jsxを修正する。(テーマのフォルダ名によっては、themes/に続くファイルパスがicarus/ではないかもしれない) 下記のように機能別でタグが書かれている。コメントアウトするなり、位置を変更したり条件節を追加して上げると良い。 12345678910{/* Thumbnail */}{ {has_thumbnail(page) ? &lt;div class=&quot;card-image&quot;&gt; {index ? &lt;a href={url_for(page.link || page.path)} class=&quot;image is-7by3&quot;&gt; &lt;img class=&quot;thumbnail&quot; src={get_thumbnail(page)} alt={page.title || get_thumbnail(page)} /&gt; &lt;/a&gt; : &lt;span class=&quot;image is-7by3&quot;&gt; &lt;img class=&quot;thumbnail&quot; src={get_thumbnail(page)} alt={page.title || get_thumbnail(page)} /&gt; &lt;/span&gt;}&lt;/div&gt; : null} } Icarusでサイドバーのウィジェットを変更したい#themes/icarus/_config.ymlにてウィジェット情報が記載されている。例えば、初期表示されている「Google FeedBurner」と「Google Adsense」のウィジェットを非表示にする場合は、コメントアウト（または削除）してあげるだけで良い 変更前#1234567891011121314151617181920212223# Tags widget configurations- # Where should the widget be placed, left sidebar or right sidebar position: left type: tags# Google FeedBurner email subscription widget configurations- # Where should the widget be placed, left sidebar or right sidebar position: left type: subscribe_email # Hint text under the email input description: # Feedburner ID feedburner_id: ''# Google AdSense unit configurations- # Where should the widget be placed, left sidebar or right sidebar position: left type: adsense # AdSense client ID client_id: '' # AdSense AD unit ID slot_id: '' 変更後#1234567891011121314151617181920212223# Tags widget configurations- # Where should the widget be placed, left sidebar or right sidebar position: left type: tags# # Google FeedBurner email subscription widget configurations# -# # Where should the widget be placed, left sidebar or right sidebar# position: left# type: subscribe_email# # Hint text under the email input# description: # # Feedburner ID# feedburner_id: ''# # Google AdSense unit configurations# -# # Where should the widget be placed, left sidebar or right sidebar# position: left# type: adsense# # AdSense client ID# client_id: ''# # AdSense AD unit ID# slot_id: '' カテゴリを階層化せずに使用したい#Hexoではカテゴリやタグの書き方は下記のようになる。 12345678title: Hexoのテーマ「Icarus」カスタマイズまとめdate: 2021/12/28 12:01:00categories: - プログラミングtags: - 環境構築 複数のカテゴリを指定すると階層化されてしまう プログラミング&gt;Hexoと階層化されてしまう。 1234567title: Hexoのテーマ「Icarus」カスタマイズまとめdate: 2021/12/28 12:01:00categories: - プログラミング - Hexotags: - 環境構築 対応策として、配列で記載する。これにより配列内に記載した組み合わせが階層化される。そのため別のリストで記載したカテゴリは階層化されない。 1234567title: Hexoのテーマ「Icarus」カスタマイズまとめdate: 2021/12/28 12:01:00categories: - [プログラミング] - [Hexo]tags: - 環境構築 おわりに#icarusはダークモード（night mode）を実装できる点と見た目のスマートさから導入した。見た目も良いね。","link":"/2021/12/28/icarus-update/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start#ドメインなにかの領域にソフトウェアに適応する。領域がドメイン ドメインエキスパートに手助けしてもらって、役立つようなものを作るドメインエキスパートは、領域の専門家。 保守性を向上まさかりおじさん DDDの公演から、DDDの実践の場に適切だなあ ドメインが複雑なら ドメイン駆動設計を導入するために転職して最初の3ヶ月でやったこと[DDD] - little hands’ lab こういうテストでお手本を作るオニオンアーキテクチャなどでお手本などを実際に作る お手本は外部イメージもある ライブモデリングとコーディングで理解するDDD (DDD勉強会2021#1) - YouTube コンテキストマップを作って、コアドメインを見定める 問題領域：娯楽を楽しみたい 解決領域：サッカー動画配信サービスTVゲーム エンジニアの納得感を得なければならないなんのためにやっているのか？と混乱を招く。 今までの方法に固執してしまう 現場の課題とDDDによってどう解決するかを伝えるのが必要。DDDは機能性と変更用意性の向上 全部するのではなく、「負債が特にひどい箇所に絞って」 現場で役立つシステム設計の原則 SpatialChat（スペチャ）を仕様アイコンをドラッグして近くの人とおしゃべりできる 複数画面共有が可能 実際の設計から、スクラッチ（まっさらな状態から）設計実装するー＞そこで得た知見を共有する。o 規定集・マニュアルを用いて、それをMODELなどコードに落とし込んだ。 コードの重複が激減しているー＞UTがないとだめ Why の合意形成#悪い設計で失っているもの・良い設計で得られるの言語化、数値化 改修コストなのか、時間なのか Howの認識合わせ#一覧網羅ではなく、のうたんずけ WEhatの体験学習#イミュータブルドメインオブジェクトを実際に動かす 悪いサンプルを作るのは難しい 記憶から呼び戻して作る","link":"/1984/01/24/hello-world-copy/"},{"title":"Hexoをローカル環境で構築する","text":"HexoはNode.jsの静的サイトジェネレーターツールの名称である。静的サイトのため、データベースなどは不要な点が特徴。加えて、Markdownで記事を作成するため、サービスに依存しない。作成した記事は、Serverを起動することで確認できるが、コマンドによってHTML形式で静的サイトに変換できる。 Hexoのインストール方法#Node.jsへHexoのインストール#Node.jsの実行環境は構築済みとする。DockerでNode.jsのイメージを使用した。 1npm install -g hexo Hexoの雛形作成#下記コマンドでひな形ファイルを作成できる。※APPはプロジェクトの名前 1hexo init APP その結果、下記のようなディレクトリ構成で作成される 12345678910├─ .github├─ node_modules├─ scaffolds├─ source| └─ post.md| ├─ themes| └─ landscape├─ _config.yml Localでの確認方法#下記コマンドで実行可能 1hexo server themesの変更#下記サイトからHexoのテーマを選択できる。Themes | Hexo こちらからgithubのページへアクセスできる。そこから該当テーマのディレクトリをダウンロードする。（Download ZIP または git clone XXX)ダウンロードしたファイルは、themesファイル内に配置する。（hexo initのときにはlandscapeディレクトリが配置されている） その後、_config.ymlにて記載されているthemeをthemesファイル内にあるテーマのディレクトリ名へと変更する テーマについて#Hexoのicarusは下記が作者のサイトになっている如何给 Icarus 增加夜间模式 - iMaeGoo’s Blog また、themesによっては別のライブラリをインストールする必要がある。たとえば、icarusを適用した場合下記のようなライブラリをインストールするコマンドを実行する。 これらのコマンドは、hexo server実行時のエラーで案内される。 1npm install --save bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3 hexo-component-inferno@^0.14.0 inferno@^7.3.3 inferno-create-element@^7.3.3 おわりに#icarusはダークモード（night mode）を実装できる点と見た目のスマートさから導入した。見た目も良いね。","link":"/2021/12/28/hexo-init/"},{"title":"2021年に読んだプログラミング関連の本まとめ","text":"2021年に\bは、プログラミングの本を多く読んだ。エンジニアに良く推薦されている名著を中心に読んだことがあるので、知られている本が多いのだが、やはり長年人気がある本ということもあって大変勉強になった。勉強になったとはいえ、どうしても一読した限りでは理解しきれないものばかりだ。方法ではなく原理が多く、頭では理解できていても実践として活かすことができていない。特にエンジニアとして活動し始めた頃に読んだ本を今読み直すと、いくつもの発見がある。 2021年に読んだプログラミング関連の本#リーダブルコード#","link":"/2021/12/28/programming-books/"},{"title":"Excelのブック単位ですべてのシートをまとめて拡大・縮小する","text":"シートをまとめて選択して更新 シートをまとめて選択して更新# Shift+シート名をクリックによって、拡大・縮小したいシートを選ぶ。 右下の拡大・縮小バーを選択して変更する 一気にすべてが拡大される","link":"/2022/08/29/Excel/"},{"title":"SVNTortoiseで特定のリビジョンの差分を取り込む","text":"特定のRevisionの差分を取得する 余談：ローカルで変更した差分を、取り消したい 特定のRevisionの差分を取得する# 指定したファイルのログを「show log」をクリックする 比較したい２つのRevisionをCtrlを推しながら２箇所を選択する 例えば下記のようにあり、Rev105からRev106とRev108の共通のコミットメッセージを取り込みたいのであれば、Rev105とRev108を比較すると、106と108で追記された差分を読み取ることができる。 123Rev 108. Imdex改修Rev 106. Index改修Rev 105. 管理画面改修 余談：ローカルで変更した差分を、取り消したい# 特定のファイルを選択して「show log」を選ぶ。 Revertを選ぶ Revertによってもとに戻すファイルが表示されるので、OKを押す Revert処理が始まり終わったら処理が終了する","link":"/2022/08/29/Excel2/"},{"title":"phpファイルの閉じ処理「?&gt;」は書かないようにしようね","text":"phpの閉じカッコについて 余談 参考文献 phpの閉じカッコについて#phpをファイル内に記載するときは、&lt;?php内に処理を記載する。こちらの末尾の?&gt;は基本的には不要だ。 12345&lt;?php// phpの本文?&gt; これで良い。 1234&lt;?php// phpの本文 なぜかというと、php処理を閉じてしまったあとに、２行以上の改行がある場合、文字列としてファイルが空白文字を出力してしまうケースが有るちなみに、１行の空白行であれば、phpがいい感じに処理してくれるようだが、2行以上あるとそれ移行は、アウトプットされてしまう。要するに、htmlタグなどを記載しているのと同じ状況になるというわけだ。 意図しないアウトプットが発生することにより、このようなエラーが発生するWarning: Cannot modify header information - headers already sent by XXX これは、アウトプット直後にheaderを更新するリクエストを贈ろうとした際に発生するので、空白行が存在していると、発生する こういう事情から、末尾の?&gt;はViewの役割を持つHTMLタグを記載する箇所以外では使わないほうが、自然であろう。 余談#更に付け加えると公式ドキュメントのheader関数にて記載がある header() 関数は、 通常の HTML タグまたは PHP からの出力にかかわらず、すべての実際の 出力の前にコールする必要があることです。頻出するエラーとして、include または require 関数、他のファイルをアクセスする関数に 空白または空行があり、header() の前に出力が 行われてしまうというものがあります PHP: header - Manual headerを書き換える処理は、&lt;?phpの上にも何も書いてはだめ。classの関数呼び出しの際は、上から処理を取得するってことではないのかな？挙動がわからないけど、閉じカッコは使わないほうが良さそう 1234567&lt;html&gt;&lt;?php/* これはエラーとなります。この上に出力があることに注目してください。 * それはheader()のコールより前であるということになります */header('Location: http://www.example.com/');exit;?&gt; 参考文献#PHP の headers already sent エラーはどう直したらいいですか？ - スタック・オーバーフロー","link":"/2022/08/19/php/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"shell","slug":"shell","link":"/tags/shell/"},{"name":"coding","slug":"coding","link":"/tags/coding/"},{"name":"vscode","slug":"vscode","link":"/tags/vscode/"},{"name":"expansion","slug":"expansion","link":"/tags/expansion/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"phpunit","slug":"phpunit","link":"/tags/phpunit/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"お酒","slug":"お酒","link":"/tags/%E3%81%8A%E9%85%92/"},{"name":"環境構築","slug":"環境構築","link":"/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/"},{"name":"本","slug":"本","link":"/tags/%E6%9C%AC/"},{"name":"Excel","slug":"Excel","link":"/tags/Excel/"},{"name":"shortcut","slug":"shortcut","link":"/tags/shortcut/"},{"name":"SVNTortoise","slug":"SVNTortoise","link":"/tags/SVNTortoise/"},{"name":"php","slug":"php","link":"/tags/php/"}],"categories":[{"name":"programming","slug":"programming","link":"/categories/programming/"},{"name":"おすすめ","slug":"おすすめ","link":"/categories/%E3%81%8A%E3%81%99%E3%81%99%E3%82%81/"},{"name":"趣味","slug":"趣味","link":"/categories/%E8%B6%A3%E5%91%B3/"},{"name":"プログラミング","slug":"プログラミング","link":"/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"},{"name":"Excel","slug":"Excel","link":"/categories/Excel/"},{"name":"SVN","slug":"SVN","link":"/categories/SVN/"}],"pages":[]}